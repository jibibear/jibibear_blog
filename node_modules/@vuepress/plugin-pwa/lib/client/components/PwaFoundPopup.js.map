{"version":3,"file":"PwaFoundPopup.js","sources":["../../../src/client/components/PwaFoundPopup.ts"],"sourcesContent":["import { useLocaleConfig } from '@vuepress/helper/client'\nimport type { PropType, SlotsType, VNode } from 'vue'\nimport { Transition, defineComponent, h, onMounted, ref } from 'vue'\nimport { usePwaEvent } from '../composables/index.js'\nimport type { PwaPluginLocaleConfig } from '../types.js'\nimport { UpdateIcon } from './icons.js'\n\nimport '../styles/popup.css'\n\nexport const PwaFoundPopup = defineComponent({\n  name: 'PwaFoundPopup',\n\n  props: {\n    /** locale data */\n    locales: {\n      type: Object as PropType<PwaPluginLocaleConfig>,\n      required: true,\n    },\n  },\n\n  slots: Object as SlotsType<{\n    default?: (props: {\n      found: boolean\n      refresh: () => void\n    }) => VNode | VNode[] | null\n  }>,\n\n  setup(props, { slots }) {\n    const locale = useLocaleConfig(props.locales)\n    const found = ref(false)\n\n    const refresh = (): void => {\n      if (found.value) {\n        // force refresh\n        // @ts-expect-error: A non-standard API\n        window.location.reload(true)\n        found.value = false\n      }\n    }\n\n    onMounted(() => {\n      const event = usePwaEvent()\n\n      event.on('updatefound', () => {\n        void navigator.serviceWorker.getRegistration().then((registration) => {\n          // Check whether a valid service worker is active\n          if (registration?.active) found.value = true\n        })\n      })\n\n      event.on('updated', () => {\n        found.value = false\n      })\n    })\n\n    return (): VNode =>\n      h(\n        Transition,\n        { name: 'popup' },\n        () =>\n          slots.default?.({\n            found: found.value,\n            refresh,\n          }) ??\n          (found.value\n            ? h(\n                'button',\n                {\n                  type: 'button',\n                  class: 'sw-hint-popup',\n                  tabindex: 0,\n                  onClick: () => {\n                    refresh()\n                  },\n                },\n                [\n                  locale.value.hint,\n                  h('span', { class: 'icon-wrapper' }, h(UpdateIcon)),\n                ],\n              )\n            : null),\n      )\n  },\n})\n"],"names":["PwaFoundPopup","defineComponent","props","slots","locale","useLocaleConfig","found","ref","refresh","onMounted","event","usePwaEvent","registration","h","Transition","UpdateIcon"],"mappings":"mQASa,MAAAA,EAAgBC,EAAgB,CAC3C,KAAM,gBAEN,MAAO,CAEL,QAAS,CACP,KAAM,OACN,SAAU,EACZ,CACF,EAEA,MAAO,OAOP,MAAMC,EAAO,CAAE,MAAAC,CAAM,EAAG,CACtB,MAAMC,EAASC,EAAgBH,EAAM,OAAO,EACtCI,EAAQC,EAAI,EAAK,EAEjBC,EAAU,IAAY,CACtBF,EAAM,QAGR,OAAO,SAAS,OAAO,EAAI,EAC3BA,EAAM,MAAQ,GAElB,EAEA,OAAAG,EAAU,IAAM,CACd,MAAMC,EAAQC,EAAY,EAE1BD,EAAM,GAAG,cAAe,IAAM,CACvB,UAAU,cAAc,gBAAA,EAAkB,KAAME,GAAiB,CAEhEA,GAAc,SAAQN,EAAM,MAAQ,GAC1C,CAAC,CACH,CAAC,EAEDI,EAAM,GAAG,UAAW,IAAM,CACxBJ,EAAM,MAAQ,EAChB,CAAC,CACH,CAAC,EAEM,IACLO,EACEC,EACA,CAAE,KAAM,OAAQ,EAChB,IACEX,EAAM,UAAU,CACd,MAAOG,EAAM,MACb,QAAAE,CACF,CAAC,IACAF,EAAM,MACHO,EACE,SACA,CACE,KAAM,SACN,MAAO,gBACP,SAAU,EACV,QAAS,IAAM,CACbL,GACF,CACF,EACA,CACEJ,EAAO,MAAM,KACbS,EAAE,OAAQ,CAAE,MAAO,cAAe,EAAGA,EAAEE,CAAU,CAAC,CACpD,CACF,EACA,KACR,CACJ,CACF,CAAC"}