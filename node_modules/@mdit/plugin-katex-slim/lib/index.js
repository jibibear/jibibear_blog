import{createRequire as x}from"node:module";import{escapeHtml as s}from"@mdit/helper";import{tex as g}from"@mdit/plugin-tex";const y=x(import.meta.url);let p=!0,n;try{n=(await import("katex")).default}catch{/* istanbul ignore next -- @preserve */p=!1}const S=(t,o,a)=>{let e;try{e=n.renderToString(t,{...o,displayMode:!1})}catch(r){/* istanbul ignore else -- @preserve */if(r instanceof n.ParseError)console.warn(r),e=`<span class='katex-error' title='${s(r.toString())}'>${s(t)}</span>`;else throw r}return a?.(e,!1)??e},$=(t,o,a)=>{let e;try{e=`<p class='katex-block'>${n.renderToString(t,{...o,displayMode:!0})}</p>
`}catch(r){/* istanbul ignore else -- @preserve */if(r instanceof n.ParseError)console.warn(r),e=`<p class='katex-block katex-error' title='${s(r.toString())}'>${s(t)}</p>
`;else throw r}return a?.(e,!0)??e},I=(t,o={})=>{/* istanbul ignore if -- @preserve */if(!p){console.error('[@mdit/plugin-katex]: "katex" not installed!');return}const{allowInlineWithSpace:a=!1,mathFence:e=!1,mhchem:r=!1,logger:m=l=>l==="newLineInDisplayMode"?"ignore":"warn",transformer:i,...f}=o;r&&y("katex/contrib/mhchem"),t.use(g,{allowInlineWithSpace:a,mathFence:e,render:(l,h,u)=>{const c={strict:(d,k,w)=>m(d,k,w,u)??"ignore",throwOnError:!1,...f};return h?$(l,c,i):S(l,c,i)}})};export{I as katex};
//# sourceMappingURL=index.js.map
